'use strict'

import angular from 'angular'
import 'd3'
import 'lodash.clonedeep'
import foreach from 'lodash.foreach'
import pluck from 'lodash.pluck'

import view from './view'

angular
  .module('xoWebApp.directives')
  .directive('weekheatmap', heatmap)

function heatmap () {
  return {
    restrict: 'E',
    replace: false,
    scope: {
      chartData: '=',
      days: '=',
      steps: '=',
      colors: '='
    },
    link,
    template: view
  }

  function link (scope, element, attrs) {
    scope.matrix = []
    scope.days = scope.days || ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    scope.colors = scope.colors || ['#ffffee', '#ffffd9', '#edf8b1', '#c7e9b4', '#7fcdbb', '#41b6c4', '#1d91c0', '#225ea8', '#253494', '#081d58']

    scope.hours = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]

    if (scope.steps) {
      scope.intervals = []

      for (var i = 1; i < scope.steps.length; i++) {
        scope.intervals.push({
          start: scope.steps[i - 1],
          end: scope.steps[i],
          color: scope.colors[i]
        })
      }
    }
    scope.$watch(function () {return scope.chartData}, function (newVal) {
      // console.log(scope.chartData);
      displayData()
    })

    function displayData () {
      if (!scope.chartData) {
        return
      }

      scope.min = Math.min.apply(null, pluck(scope.chartData, 'value'))
      scope.max = Math.max.apply(null, pluck(scope.chartData, 'value'))
      if (!scope.steps) {
        scope.intervals = []
        foreach(scope.colors, function (color, idx) {
          scope.intervals.push({
            start: scope.min + idx * (scope.max - scope.min) / scope.colors.length,
            end: scope.min + (1 + idx) * (scope.max - scope.min) / scope.colors.length,
            color: color
          })
        })
      }
      var matrix = []
      foreach(scope.chartData, function (datum) {
        const d = new Date(datum.date)
        const v = datum.value
        const day = d.getDay()
        const hour = d.getHours()
        if (!matrix[day]) {
          matrix[day] = []
        }
        if (!matrix[day][hour]) {
          matrix[day][hour] = {
          value: v,
          nb: 1
         }
        } else {
          matrix[day][hour].value += v
          matrix[day][hour].nb++
        }
        matrix[day][hour].color = color(matrix[day][hour].value / matrix[day][hour].nb)

      })
      scope.matrix = matrix
    }

    function color (value) {
      var color = null
      foreach(scope.intervals, function (interval, pos) {
        if (interval.start <= value && value < interval.end || (pos === scope.intervals.length - 1 && value === interval.end)) {
          color = interval.color
        }
      })
      return color
    }

    displayData()
  }
}
