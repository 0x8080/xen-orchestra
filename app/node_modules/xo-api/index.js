import angular from 'angular';
import 'angular-cookies';

import xoLib from 'xo-lib';

export default angular.module('xo-api', [
  'ngCookies',
])
  .run(function ($rootScope) {
    // Ensure correct integration with Angular.
    xoLib.setScheduler(function (fn) {
      $rootScope.$evalAsync(fn);
    });
  })
  .service('xoApi', function ($cookieStore) {
    var xo = null;

    try {
      let token = $cookieStore.get('token');

      // If there is a token, sign in with it.
      if (token) {
        xo = new xoLib.Xo({
          auth: { token },
        });
      }
    } catch (e) {
      if (e instanceof SyntaxError) {
        $cookieStore.remove('token');
      } else {
        throw e;
      }
    }

    return {
      //------------------
      // Session
      //------------------

      logIn: function (email, password, persist) {
        xo = new xoLib.Xo({
          auth: { email, password },
        });

        if (persist) {
          xo.call('token.create').then(function (token) {
            $cookieStore.put('token', token);
          });
        }
      },
      logOut: function () {
        xo = null;
        $cookieStore.remove('token');
      },
      get status() {
        return xo ? xo.status : 'disconnected';
      },
      get user() {
        return xo && xo.user;
      },

      //------------------
      // RPC
      //------------------

      call(method, params) {
        return xo.call(method, params);
      },

      //------------------
      // Objects
      //------------------

      get(id) {
        if (angular.isArray(id)) {
          let objects = [];
          angular.forEach(id, function (id) {
            let object =
              xo.objects.find('UUID', id) ||
              xo.objects.find('ref', id)
            ;

            objects.push(object);
          });
          return objects;
        }

        return xo.objects.find('UUID', id) || xo.objects.find('ref', id);
      },

      get all() {
        throw new Error('deprecated');
      },

      get byTypes() {
        return xo ? xo.objects._indexes.type : {};
      },
    };
  })
  .name
;
