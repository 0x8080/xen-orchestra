import angular from 'angular'
import indexOf from 'lodash.indexof'
let isArray = angular.isArray

import 'angular-cookies'

import xoLib from 'xo-lib'

export default angular.module('xo-api', [
  'ngCookies'
])
  .run(function ($rootScope) {
    // Ensure correct integration with Angular.
    xoLib.setScheduler(function (fn) {
      $rootScope.$evalAsync(fn)
    })
  })
  .service('xoApi', function ($cookieStore) {
    var xo = new xoLib.Xo()

    try {
      let token = $cookieStore.get('token')

      // If there is a token, sign in with it.
      if (token) {
        xo.signIn({ token })
      }
    } catch (e) {
      if (e instanceof SyntaxError) {
        $cookieStore.remove('token')
      } else {
        throw e
      }
    }

    let getObject
    {
      let {
        all: byIds,
        indexes: {
          ref: byRefs,
          UUID: byUuids
        }
      } = xo.objects

      // Look up an object by id, UUID or ref and optionally check its
      // type.
      getObject = (id, type) => {
        let object = byIds[id] || byUuids[id] || byRefs[id]

        // If not found by id, try by UUID and ref.
        if (!object) {
          return
        }

        if (
          // No type specifier.
          !type ||

          // A single type.
          (type === object.type) ||

          // An array of possible types.
          isArray(type) && (indexOf(type, object.type) === -1)
        ) {
          return object
        }
      }
    }

    return {
      // -----------------
      // Session
      // -----------------

      logIn (email, password, persist) {
        return xo.signIn({ email, password }).then(() => {
          if (persist) {
            xo.call('token.create').then(function (token) {
              $cookieStore.put('token', token)
            })
          }
        })
      },
      logOut () {
        $cookieStore.remove('token')

        return xo.signOut()
      },
      get status () {
        return xo.status
      },
      get user () {
        return xo.user
      },

      // -----------------
      // RPC
      // -----------------

      call (method, params) {
        return xo.call(method, params)
      },

      // -----------------
      // Objects
      // -----------------

      get (id, types) {
        if (isArray(id)) {
          let objects = []

          angular.forEach(id, id => {
            let object = getObject(id, types)
            if (object) {
              objects.push(object)
            }
          })

          return objects
        }

        return getObject(id, types)
      },

      all: xo.objects.all,

      byTypes: xo.objects.indexes.type
    }
  })
  .name
