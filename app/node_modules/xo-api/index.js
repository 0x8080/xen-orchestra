import angular from 'angular';
import 'angular-cookies';

import createXo from 'xo-lib';
// import xoServices from 'xo-services';

export default angular.module('xo-api', [
  'ngCookies',

  // xoServices,
])
  .run(function ($rootScope) {
    // Ensure correct integration with Angular.
    createXo.setScheduler(function (fn) {
      $rootScope.$evalAsync(fn);
    });
  })
  .service('xoApi', function ($cookieStore) {
    var xo = null;

    // If there is a token, sign in with it.
    {
      let token = $cookieStore.get('token');
      if (token) {
        xo = createXo({
          auth: { token },
        });
        xo.connect();
      }
    }

    return {
      //------------------
      // Session
      //------------------

      logIn: function (email, password, persist) {
        xo = createXo({
          auth: { email, password },
        });

        var promise = xo.connect();

        if (persist) {
          promise.then(function () {
            return xo.call('token.create');
          }).then(function (token) {
            $cookieStore.put('token', token);
          });
        }

        // TODO: handle failed auth.

        return promise;
      },
      logOut: function () {
        xo = null;
        $cookieStore.remove('token');
      },
      get status() {
        return xo ? xo.status : 'disconnected';
      },
      get user() {
        return xo && xo.user;
      },

      //------------------
      // RPC
      //------------------

      call(method, params) {
        return xo.call(method, params);
      },

      //------------------
      // Objects
      //------------------

      get(id) {
        if (angular.isArray(id)) {
          let objects = [];
          angular.forEach(id, function (id) {
            let object =
              xo.objects.find('UUID', id) ||
              xo.objects.find('ref', id)
            ;

            objects.push(object);
          });
          return objects;
        }

        return xo.objects.find('UUID', id) || xo.objects.find('ref', id);
      },

      get all() {
        throw new Error('deprecated');
      },

      get byTypes() {
        return xo.objects._indexes.type;
      },

      get revision() {
        throw new Error('deprecated');
      },
    };
  })
  .name
;
