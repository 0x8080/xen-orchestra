import angular from 'angular';
import {
  format as formatUrl,
  parse as parseUrl,
  resolve as resolveUrl
} from 'url';
import {RFB} from 'novnc-node';

import view from './view';

//====================================================================

function parseRelativeUrl(url) {
  /* global window: false */
  return parseUrl(resolveUrl(String(window.location), url));
}

const PROTOCOL_ALIASES = {
  'http:': 'ws:',
  'https:': 'wss:',
};

function fixProtocol(url) {
  let protocol = PROTOCOL_ALIASES[url.protocol];

  if (protocol) {
    url.protocol = protocol;
  }
}

//====================================================================

export default angular.module('no-vnc', [])
  .controller('NoVncCtrl', function ($attrs, $element, $scope) {
    this.height = 480;
    $attrs.$observe('height', (height) => {
      this.height = height;
    });
    this.width = 640;
    $attrs.$observe('width', (width) => {
      this.width = width;
    });

    let rfb;
    function clean() {
      // If there was a previous connection.
      if (rfb) {
        rfb.disconnect();
        rfb = undefined;
      }
    }

    this.remoteControl = {
      sendCtrlAltDel() {
        if (rfb) {
          rfb.sendCtrlAltDel();
        }
      },
    };

    let canvas = $element.find('canvas')[0];

    $attrs.$observe('url', (url) => {
      // Remove previous connection.
      clean();

      // If the URL is empty, stop now.
      if (!url) {
        return;
      }

      // Parse the URL.
      url = parseRelativeUrl(url);
      fixProtocol(url);

      let isSecure = url.protocol === 'wss:';

      rfb = new RFB({
        encrypt: isSecure,
        target: canvas,
        wsProtocols: ['chat'],
      });

      // Connect.
      rfb.connect(formatUrl(url));
    });

    $scope.$on('$destroy', clean);
  })
  .directive('noVnc', function () {
    return {
      bindToController: true,
      controller: 'NoVncCtrl as noVnc',
      restrict: 'E',
      scope: {
        remoteControl: '=',
      },
      template: view,
    };
  })
  .name
;
