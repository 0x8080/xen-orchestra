import ChartistGraph from 'react-chartist'
import ChartistLegend from 'chartist-plugin-legend'
import React from 'react'
import {
  formatSize,
  propTypes
} from 'utils'

// Number of labels on axis X.
const N_LABELS_X = 5

const LABEL_OFFSET_Y = 75

const GLOBAL_OPTIONS = {
  showPoint: false,
  lineSmooth: true,
  showArea: true,
  height: 300,
  low: 0,
  axisY: {
    labelInterpolationFnc: (value) => formatSize(value),
    offset: LABEL_OFFSET_Y
  },
  plugins: [
    ChartistLegend()
  ]
}

// ===================================================================

const makeLabelInterpolationFnc = (nValues, endTimestamp, interval) => {
  const labelSpace = Math.floor(nValues / N_LABELS_X)
  return (value, index) =>
    index % labelSpace === 0
    ? endTimestamp - (nValues - index - 1) * interval
    : null
}

const makeObjectSeries = (data, prefix) => {
  const series = []

  for (const io in data) {
    const ioData = data[io]
    for (const letter in ioData) {
      series.push({
        name: `${prefix}${letter} (${io})`,
        data: ioData[letter]
      })
    }
  }

  return series
}

const templateError =
  <div>
    No stats.
  </div>

// ===================================================================

export const CpuLineChart = propTypes({
  data: propTypes.object.isRequired,
  options: propTypes.object
})(({ data, options = {} }) => {
  const stats = data.stats.cpus
  const { length } = (stats && stats[0]) || {}

  if (!length) {
    return templateError
  }

  const series = []

  for (const id in stats) {
    series.push({
      name: `Cpu${id}`,
      data: stats[id]
    })
  }

  return (
    <ChartistGraph
      type='Line'
      data={{
        series
      }}
      options={{
        ...GLOBAL_OPTIONS,
        high: 100,
        axisX: {
          labelInterpolationFnc: makeLabelInterpolationFnc(length, data.endTimestamp, data.interval)
        },
        axisY: {
          labelInterpolationFnc: (value) => `${value}%`,
          offset: LABEL_OFFSET_Y
        },
        ...options
      }}
    />
  )
})

export const MemoryLineChart = propTypes({
  data: propTypes.object.isRequired,
  options: propTypes.object
})(({ data, options = {} }) => {
  const {
    memory,
    memoryUsed
  } = data.stats

  if (!memory || !memoryUsed) {
    return templateError
  }

  return (
    <ChartistGraph
      type='Line'
      data={{
        series: [{
          name: 'Memory used',
          data: memoryUsed
        }]
      }}
      options={{
        ...GLOBAL_OPTIONS,
        high: memory[memory.length - 1],
        axisX: {
          labelInterpolationFnc: makeLabelInterpolationFnc(memoryUsed.length, data.endTimestamp, data.interval)
        },
        ...options
      }}
    />
  )
})

export const XvdLineChart = propTypes({
  data: propTypes.object.isRequired,
  options: propTypes.object
})(({ data, options = {} }) => {
  const stats = data.stats.xvds
  const { length } = (stats && stats.r.a) || {}

  if (!length) {
    return templateError
  }

  return (
    <ChartistGraph
      type='Line'
      data={{
        series: makeObjectSeries(stats, 'Xvd')
      }}
      options={{
        ...GLOBAL_OPTIONS,
        axisX: {
          labelInterpolationFnc: makeLabelInterpolationFnc(length, data.endTimestamp, data.interval)
        },
        ...options
      }}
    />
  )
})

export const VifLineChart = propTypes({
  data: propTypes.object.isRequired,
  options: propTypes.object
})(({ data, options = {} }) => {
  const stats = data.stats.vifs
  const { length } = (stats && stats.rx[0]) || {}

  if (!length) {
    return templateError
  }

  return (
    <ChartistGraph
      type='Line'
      data={{
        series: makeObjectSeries(stats, 'Vif')
      }}
      options={{
        ...GLOBAL_OPTIONS,
        axisX: {
          labelInterpolationFnc: makeLabelInterpolationFnc(length, data.endTimestamp, data.interval)
        },
        ...options
      }}
    />
  )
})
